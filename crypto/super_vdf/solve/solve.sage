primes = Primes()[:16]

def pollards_rho(n):
    x = 2
    for _ in range(30):
        x = int(pow(x, product(primes), n))
        g = gcd(x - 1, n)
        if 1 < g < n:
            return g

    raise ValueError("Fail")

n = 181018877142159163206583726629521951591764758700763596711875712162671392148275873040166773828932135213109002509962217788830894498597865004166104099963963142319736976062337852732215765405463622982245359343499500639415165094961738396745351422215950948977800258134422445063378297348463713777793503232389966610766636514327845456133419044236579588101489777301574434628707713914619400724600886909677758065300900043876856934960705116973602177746301222889457302601023498205236175314722947956301413898175621491765656970538892203345754695256173149614287420933684635942938783021917415034793744195201447087676248555273437500000001
# (59 ** 59 ** 59 ** 59 ** 1333337) % n

p = pollards_rho(n)
q = n // p

phis = []
phis.append((p - 1) * (q - 1))

phis.append(euler_phi(phis[-1]))
phis.append(euler_phi(phis[-1]))

exp = pow(59, 1333337, phis[2])
exp = pow(59, exp, phis[1])
exp = pow(59, exp, phis[0])
ans = pow(59, exp, n)
