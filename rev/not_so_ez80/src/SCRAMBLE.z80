; Original code by Kyle Westhaus

; expects null-terminated input buffer in hl
; trashes ??
scramble:
        ld c,1 ; init position to 1

scramble_loop:
        ld a, (hl)
        or a
        jr z, scramble_end ; terminate if null byte reached

        dec a ; make range 0-24 for offset into index array
        push hl ; store current letter pointer
        ld de, scramble_index
        ld h,0
        ld l,a
        add hl, de
        ld a, (hl) ; index now in a
        ld b,c ; copy position for use in loop

pos_loop:
        add a,11
        cp 25
        jr c, pos_nomod
        sub 25

pos_nomod:
        djnz pos_loop
        
        ld de, scramble_table
        ld h,0
        ld l,a
        add hl, de
        ld a, (hl)
        inc a ; make range 1-25 so only null byte is end of string
        pop hl
        ld (hl), a

        inc hl
        inc c
        jr scramble_loop

scramble_end:
        ret

scramble_index:
        .db 3
        .db 8
        .db 20
        .db 2
        .db 24
        .db 23
        .db 6
        .db 12
        .db 19
        .db 0
        .db 22
        .db 5
        .db 15
        .db 17  
        .db 11
        .db 16
        .db 9
        .db 13
        .db 18
        .db 1
        .db 4
        .db 10
        .db 14
        .db 7
        .db 21
scramble_table:
        .db $09,$13,$03,$00,$14
        .db $0B,$06,$17,$01,$10
        .db $15,$0E,$07,$11,$16
        .db $0C,$0F,$0D,$12,$08
        .db $02,$18,$0A,$05,$04
